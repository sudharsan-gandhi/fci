{
  "name": "express-status-monitor",
  "version": "1.0.1",
  "description": "Realtime Monitoring for Express-based Node applications",
  "main": "index.js",
  "keywords": [
    "node",
    "status",
    "monitoring",
    "express",
    "charts"
  ],
  "engines": {
    "node": ">=4"
  },
  "author": {
    "name": "Rafal Wilinski",
    "email": "raf.wilinski@gmail.com",
    "url": "http://rwilinski.me"
  },
  "contributors": [
    {
      "name": "Julien Breux",
      "email": "julien.breux@gmail.com",
      "url": "https://github.com/JulienBreux/"
    },
    {
      "name": "Ferdinand Mütsch",
      "email": "mail@ferdinand-muetsch.de",
      "url": "https://github.com/n1try/"
    },
    {
      "name": "Mattia Richetto",
      "email": "mattia.richetto@gmail.com",
      "url": "https://github.com/mattiaerre"
    },
    {
      "name": "Jiri Spac",
      "email": "capajj@gmail.com",
      "url": "https://github.com/capaj/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/RafalWilinski/express-status-monitor.git"
  },
  "license": "MIT",
  "dependencies": {
    "debug": "^2.6.9",
    "on-headers": "^1.0.1",
    "pidusage": "^1.1.6",
    "socket.io": "^2.0.3"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha test --  --recursive",
    "test-ci": "mocha --recursive",
    "test": "mocha --recursive --watch",
    "snyk-protect": "snyk protect",
    "publish": "publish",
    "prepublish": "npm run snyk-protect",
    "example": "npm i && npm i --prefix examples && npm start --prefix examples",
    "eslint": "eslint ."
  },
  "devDependencies": {
    "bithound": "^1.7.0",
    "chai": "^4.1.0",
    "eslint": "^4.3.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.4.2",
    "publish": "^0.6.0",
    "sinon": "^2.4.1",
    "snyk": "^1.37.0"
  },
  "snyk": true,
  "readme": "# express-status-monitor\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/express-status-monitor/Lobby/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![express-status-monitor on npm](https://img.shields.io/npm/v/express-status-monitor.svg)](https://www.npmjs.com/express-status-monitor)\n[![npm](https://img.shields.io/npm/dt/express-status-monitor.svg)](https://img.shields.io/npm/dt/express-status-monitor.svg)\n[![bitHound Overall Score](https://www.bithound.io/github/RafalWilinski/express-status-monitor/badges/score.svg)](https://www.bithound.io/github/RafalWilinski/express-status-monitor)\n[![CircleCI](https://img.shields.io/circleci/project/github/RafalWilinski/express-status-monitor/master.svg)](https://circleci.com/gh/RafalWilinski/express-status-monitor)\n\nSimple, self-hosted module based on Socket.io and Chart.js to report realtime server metrics for Express-based node servers.\n\n![Monitoring Page](http://i.imgur.com/AHizEWq.gif \"Monitoring Page\")\n\n## Demo\n\n[Demo available here](https://express-status-monitor-example-fjovaypblp.now.sh)\n\n## Support for other Node.js frameworks\n\n* [koa-monitor](https://github.com/capaj/koa-monitor) for Koa\n* [hapijs-status-monitor](https://github.com/ziyasal/hapijs-status-monitor) for hapi.js\n\n## Installation & setup\n\n1. Run `npm install express-status-monitor --save`\n2. Before any other middleware or router add following line:\n`app.use(require('express-status-monitor')());`\n3. Run server and go to `/status`\n\n## Run examples\n\n1. Go to `cd examples/`\n2. Run `npm i`\n3. Run server `npm start`\n4. Go to `http://0.0.0.0:3000`\n\n## Options\n\nMonitor can be configured by passing options object into `expressMonitor` constructor.\n\nDefault config:\n```javascript\ntitle: 'Express Status',  // Default title\npath: '/status',\nwebsocket: existingSocketIoInstance,\nspans: [{\n  interval: 1,            // Every second\n  retention: 60           // Keep 60 datapoints in memory\n}, {\n  interval: 5,            // Every 5 seconds\n  retention: 60\n}, {\n  interval: 15,           // Every 15 seconds\n  retention: 60\n}]\n\n```\n\n## Securing endpoint\n\nThe HTML page handler is exposed as a `pageRoute` property on the main\nmiddleware function.  So the middleware is mounted to intercept all requests\nwhile the HTML page handler will be authenticated.\n\nExample using https://www.npmjs.com/package/connect-ensure-login\n```javascript\nconst ensureLoggedIn = require('connect-ensure-login').ensureLoggedIn()\n\nconst statusMonitor = require('express-status-monitor')();\napp.use(statusMonitor);\napp.get('/status', ensureLoggedIn, statusMonitor.pageRoute)\n```\n\nCredits to [@mattiaerre](https://github.com/mattiaerre)\n\nExample using [http-auth](https://www.npmjs.com/package/http-auth)\n```javascript\nconst auth = require('http-auth');\nconst basic = auth.basic({realm: 'Monitor Area'}, function(user, pass, callback) {\n  callback(user === 'username' && pass === 'password');\n});\n\n// Set '' to config path to avoid middleware serving the html page (path must be a string not equal to the wanted route)\nconst statusMonitor = require('express-status-monitor')({ path: '' });\napp.use(statusMonitor.middleware); // use the \"middleware only\" property to manage websockets\napp.get('/status', auth.connect(basic), statusMonitor.pageRoute); // use the pageRoute property to serve the dashboard html page\n```\n\n## Using module with socket.io in project\n\nIf you're using socket.io in your project, this module could break your project because this module by default will spawn its own socket.io instance. To mitigate that, fill websocket parameter with your main socket.io instance as well as port parameter.\n\n## Tests and coverage\n\nIn order to run test and coverage use the following npm commands:\n```\nnpm test\nnpm run coverage\n```\n\n## License\n\n[MIT License](https://opensource.org/licenses/MIT) © Rafal Wilinski\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/RafalWilinski/express-status-monitor/issues"
  },
  "_id": "express-status-monitor@1.0.1",
  "dist": {
    "shasum": "a49fab7d38eb5ce2b01a15bb31ecd85245bf8448"
  },
  "_from": "express-status-monitor@",
  "_resolved": "https://registry.npmjs.org/express-status-monitor/-/express-status-monitor-1.0.1.tgz"
}
